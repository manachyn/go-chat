namespace: go-chat

rabbitmq:
  defines: runnable
  inherits: rabbitmq/rabbitmq
  metadata:
    name: rabbitmq
    description: >-
      Message broker service used for communication between the chat service and
      the stock bot service.
    icon: https://www.vectorlogo.zone/logos/rabbitmq/rabbitmq-ar21.png
  variables:
    RABBITMQ_ADVANCED_CONFIG_FILE:
      type: string
      value: /etc/rabbitmq/advanced.config
      description: ''
    RABBITMQ_CONFIG_FILE:
      type: string
      value: /etc/rabbitmq/rabbitmq.conf
      description: ''
    RABBITMQ_CONF_ENV_FILE:
      type: string
      value: /etc/rabbitmq/rabbitmq-env.conf
      description: ''
    rabbitmq-image:
      type: string
      value: $rabbitmq-image-tag default("3.10-management")
      description: ''

mysql:
  defines: runnable
  inherits: monk-mysql/db
  metadata:
    name: mysql
    description: Database service used for persisting user and chat data.
    icon: https://labs.mysql.com/common/logos/mysql-logo.svg?v2
  variables:
    image_tag:
      type: string
      value: latest
      description: ''
    monk_mysql_database:
      type: string
      value: monk
      description: ''
    monk_mysql_password:
      type: string
      value: monk
      description: ''
    monk_mysql_root_password:
      type: string
      value: monk
      description: ''
    monk_mysql_user:
      type: string
      value: monk
      description: ''

go-chat-service:
  defines: runnable
  metadata:
    name: go-chat-service
    description: >-
      Backend service for the chat application, handles authentication, chat
      rooms, and messaging.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    go-chat-service:
      image: env-2534.registry.local/go-chat-service:main-d8b7ecc
      build: .
      dockerfile: Dockerfile
  services:
    http-server:
      description: HTTP server port for the go-chat-service
      container: go-chat-service
      port: $port
      host-port: $port
      publish: true
      protocol: tcp
  connections:
    mysql-database:
      target: go-chat/mysql
      service: monk-mysql-db
    rabbitmq-message-broker:
      target: go-chat/rabbitmq
      service: rabbitmq-amqp-1
  variables:
    stkbt-receiver-queue:
      env: STKBT_RECEIVER_QUEUE
      type: string
      value: stock_bot_requests
      description: The name of the queue to receive stock bot requests on RabbitMQ
    stkbt-publisher-queue:
      env: STKBT_PUBLISHER_QUEUE
      type: string
      value: stock_bot_responses
      description: The name of the queue to publish processed stock responses on RabbitMQ
    log-to-file:
      env: LOG_TO_FILE
      type: bool
      value: false
      description: Flag to determine if logs should be written to a file
    jwt-secret:
      env: JWT_SECRET
      type: string
      value: mySuperSecretKey
      description: Secret key for JWT authentication
    port:
      env: PORT
      type: int
      value: 8080
      description: Port on which the go-chat-service will run
    db-username:
      env: DB_USERNAME
      type: string
      value: monk
      description: Username for the MySQL database
    db-password:
      env: DB_PASSWORD
      type: string
      value: monk
      description: Password for the MySQL database
    db-protocol:
      env: DB_PROTOCOL
      type: string
      value: tcp
      description: Protocol used to connect to the MySQL database
    db-host:
      env: DB_HOST
      type: string
      value: <- connection-hostname("mysql-database")
      description: Host address for the MySQL database
    db-port:
      env: DB_PORT
      type: int
      value: <- connection-port("mysql-database")
      description: Port for the MySQL database connection
    db-database:
      env: DB_DATABASE
      type: string
      value: monk
      description: Name of the MySQL database to connect to

stack:
  defines: group
  members:
    - go-chat/rabbitmq
    - go-chat/mysql
    - go-chat/go-chat-service
